{
  "data": [
    {
      "title": "Cohesity",
      "subtitle": "Work",
      "shortDesc": "Cohesity is a software-defined platform which solves the existing data management problems. As a frontend engineer at Cohesity, I have worked on various features for the UI dashboard using Angular/AngularJS and the latest frontend technologies.",
      "shortDescAlt": "At Cohesity, we delivered multiple features for the Cohesity UI dashboard using Angular/AngularJS. Working closely with my teammates, I often had the opportunity to own the complete UI side of many projects. Multitenancy, localization, Data Tiering are some of the major features that I contributed to, using numerous web development libraries/utilities/technologies.",
      "externalLink": "https://www.cohesity.com/",
      "details": [
        {
          "title": "Multitenancy",
          "description": "Multitenancy is a feature that provides the ability for an admin to have multiple tenants and each tenant can have different features depending on their needs. We integrated this feature on top of our existing product from managing the organization to maintaining user profiles. "
        },
        {
          "title": "Localization",
          "description": "As the name suggests, the use case was to provide the customers to have the locale of their choice. This feature allowed the user to save the locale permanently and change the locale on-the-go. "
        },
        {
          "title": "Unreleased projects",
          "description": "Multiple other projects that are not public yet so I think they come under the NDA. Better to talk about the tech instead."
        }
      ],
      "tools": {
        "Tools": "Angular, Webpack, AngularJS, SCSS, TypeScript, Jest",
        "Type": "Work",
        "Time": "June 2018 - Current"
      }
    },
    {
      "title": "Web app for Headout",
      "subtitle": "Internship",
      "shortDesc": "Worked on Headout's desktop/mobile web app written in React, Redux bundled with webpack. Worked along with the mentors on creating new flow and refactoring deprecated code. Wrote unit tests on Jest using Enzyme.",
      "shortDescAlt": "  At Headout, ​I was given the opportunity to work on the Front end side of the progressive\n                      web apps. The main goal was to increase the ROI using enhanced UI/UX. The projects\n                      varied along the line. The project follows the same architecture as Facebook's <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> which is an starter project for React which also uses\n                      Webpack which is extensible for using Redux.",
      "externalLink": "https://www.headout.com/",
      "details": [
        {
          "title": "Task 1 - Referral Page",
          "description": "For this task, I was already assigned a week to learn about how the code works and the\n                      project structure. The app was fully written in React, Redux ​and Node.\n                      It took me around 3 weeks to complete this task wherein I had to implement the newly\n                      created designs for the desktop and the mobile web app.\n                      The backend APIs were written in Java.​ I had to use JSX ​for writing the templates, LESS\n                      ​as the pre-processor for stylesheets and thunks as the middleware ​for API calls.\n                      The effort was minimized using the Module Bundler, Webpack​. Its main purpose is to\n                      bundle JavaScript files for usage in a browser, and it is also capable of transforming,\n                      bundling, or packaging just about any resource or asset.\n                      The app was server side rendered which is why React is famous. The server side\n                      rendering was implemented using NodeJS"
        },
        {
          "title": "Task 2 - Categorisation",
          "description": "The project requirements were the same. All I had to do was to implement the new\n                      design using the same libraries as above. Previously, the categories were not nested.\n                      What nesting means, is giving the categories a new structure similar to a tree with\n                      interlinked nesting too. The backend was supposed to implement the logic and I was\n                      supposed to showcase it.\n                      Through this, the user can now see on which categorical level he was and would be able\n                      to navigate through the web app without any hassle. It would prove to increase the\n                      conversion rate. While working on this I was able to write a better code for the header\n                      which is basically the navbar.\n                      For implementing this, I had to fix a lot of things in the web app as the root structure for\n                      the categories were changed. I worked on the header, i.e. the navbar, the category filter\n                      and make a new super category page which is the root category. This was to be done for\n                      both desktop and mobile."
        },
        {
          "title": "Task 3 - New Checkout Flow",
          "description": "For the sole purpose of enhancing the user experience the designer came up with a new\n                      way of procedure for booking any event. The design changes were massive and took a\n                      lot of effort to restructure the code. So to implement this we proceeded to implement\n                      only on mobile first with a AB test​ by showing it to 50% of the users.\n                      The checkout flow consisted of getting the user details like name, email and mainly the\n                      card details. This had to work along with the already existing code, so had to write\n                      modular code for this.\n                      This task was completed in a week and a half. The changes are live as of now, and after\n                      checking out the analytics it has sure helped in increasing the conversion rate."
        }
      ],
      "tools": {
        "Tools": "React, Redux, Webpack, LESS",
        "Type": "Internship",
        "Time": "May 2017 - July 2017"
      }
    },
    {
      "title": "Channel i",
      "subtitle": " College Intranet Portal",
      "shortDesc": "Channel i is the official intranet portal for our college managed by our group IMG. Worked on the frontend using React, Redux and Webpack. Also implemented Hot Module Reloading with Server Side Rendering. Used SCSS and React-Semantic to implement the design.",
      "shortDescAlt": "Channel i is the official intranet portal for our college. It is maintained by <a href='https://img.channeli.in'>Information Management Group</a>, the group which I am part of. The portal serves the purpose of live news feed for all the apps that the group has worked on and the official Notice Board of the college. It has many features which are yet to be implemented. The work is under progress now.",
      "externalLink": "https://internet.channeli.in/auth/login?next=/feed",
      "details": [
        {
          "title": "Project Setup",
          "description": "The setup is the most difficult part, I guess. I have used <a href='https://github.com/coryhouse/react-slingshot' target='_blank'>React Slingshot</a> as the boilerplate as it is similar to the project structure I have worked earlier. This starter allows us to use HMR (Hot Module Reloading) and it also have pre-written webpack configs which I found very useful later on. The styles are written using SCSS."
        },
        {
          "title": "The Challenges",
          "description": "There were a lot of challenges initially and are yet to come. The web app worked really fine but I had to implement two different designs, mobile and desktop. I had worked initially only only on the desktop part, later realizing I had to implement the mobile design as well. I had to make common components and manage two different entry points. So to implement all this, I had to set up server side rendering and sending different files (compiled by webpack) based on the use case. I also wanted to let the HMR thingy work so it took a bit of modifications."
        }
      ],
      "tools": {
        "Tools": "React, Redux, Webpack, Node, SCSS",
        "Type": "College Intranet Portal",
        "Time": "October 2017 - May 2018"
      }
    },
		{
      "title": "Vaccine Slots Discord bot",
      "subtitle": "Open Source Project",
      "shortDesc": "A side project that I made to send a notification on any discord server if COVID vaccination slots are available according to PIN or district",
      "externalLink": "https://github.com/mohitvirli/vaccine-slots-discord-bot",
      "shortDescAlt": "A side project that I made to send a notification on any discord server if COVID vaccination slots are available according to PIN or district. Used the public API provided to poll and notify accordingly using plain old JavaScript.",
      "details": [
				{
          "title": "Project Details",
          "description": "As it was very difficult to get a vaccine slot when it was initially released, I thought we can use our discord server to notify whenever there was a slot available. As the public API was already available, made use of that to poll and notify accordingly."
        }
			],
      "tools": {
        "Tools": "JS, ES6, Node, DiscordJS",
        "Type": "Open Source Project",
        "Time": "May 2021"
      }
    },
    {
      "title": "Success Factory",
      "subtitle": "Freelance Project",
      "shortDesc": "Success Factory is an organization that helps connect mentors with mentees. Developed the given designs using basic frontend technologies including SCSS and ES6. Also implemented server side rendering using Node, Express and EJS.",
      "externalLink": "https://www.successfactory.in",
      "shortDescAlt": "Success Factory is an organization that helps connect mentors with mentees. I took up the whole frontend of the Web part. The website is static with few dynamic content which is integrated using ajax calls.",
      "details": [
        {
          "title": "Project Details",
          "description": "The project was meant to be static webpages which was just writing down the HTML, CSS and\n                      JS. But along the way I realized that I should use SCSS which will make styling way more\n                      easier and use ES6 because it makes JS easier. And the routing could have been done by the\n                      backend guy, but I thought I could implement that using Node and Express. So I setup the\n                      whole project using <a href=\"https://expressjs.com/en/starter/generator.html\" target=\"_blank\">Node Express Starter</a> and wrote down the scripts for transforming SCSS\n                      and JS (ES6) using node-sass and babel and nodemon. Used Bower for package management."
        }
      ],
      "tools": {
        "Tools": "SCSS, ES6, jQuery, Node, Express, Babel",
        "Type": "Freelance Project",
        "Time": "December 2017"
      }
    },
    {
      "title": "Web App for XPrep®",
      "subtitle": "Internship",
      "shortDesc": "Created and Designed an app for Tutor Side using AngularJS and Gulp. The design was implemented using Angular-Material.",
      "externalLink": "https://xprep.co/",
      "shortDescAlt": "The app focused on creating a dashboard for tutors. It was done using a custom starter project which used AngularJS, GulpJs, etc. I worked on this app during my internship in summer '16 at XPrep.\n                      <br><br>\n                      The whole of design and the frontend along with the integration with backend was done by my. I am that kind of person who designs while coding. So a basic setup or wireframe is laid out, and I start coding it. Changing CSS here and there. Creating new elements and interactions using JavaScript.\n                      <br><br>\n                      I used <a href=\"https://material.angularjs.org/latest/\" target=\"_blank\">Angular-Material</a> for the implementation of Material Design. This app was completely mobile responsive.\n                      <br><br>\n                      I got to learn about Gulp from a very informative article from <a href=\"https://css-tricks.com/gulp-for-beginners/\" target=\"_blank\">CSS-Tricks</a>. Using this, I created my own custom tasks which were used as a standard in other starter projects. I used browser-sync for live-reloading. I didn't use jQuery because I read an article on why we shouldn't use jQuery with AngularJS. I used Bower as the package manager. The project was obviously git tracked.\n                      <br><br>\n                      I consumed the APIs in my services and used them modularly in my controllers. We used token based authentication for the app. I used <a href=\"https://github.com/angular-ui/ui-router\" target='_blank'>UI-Router</a> instead of ng-router due to its various advantages like the use of state. The main reason was the fact that I wanted to use sub-states or nested states. I also implimented OTP generation for phone for authentication.",
      "details": [],
      "tools": {
        "Tools": "HTML/CSS/JS, AngularJS, Angular-Material, GulpJS",
        "Type": "Internship",
        "Time": "May 2016 - July 2016"
      }
    },
    {
      "title": "Status App",
      "subtitle": "Intranet College App",
      "shortDesc": "The app was made for the need of continuous tracking of the servers, systems and services for IMG, IIT Roorkee.",
      "externalLink": "",
      "shortDescAlt": "The constant need of tracking the status of app services, systems and servers was the main idea behind this app. The app served a tool to check if any particular service or system is up and running or down. It also had a feature for emailing the admin if anything goes down.\n                      <br><br>\n                      This was one of the first projects I picked up in college. For this I created the wireframes and designs on Illustrator. This is the only app in which I used Illustrator for this purpose. For the creating apps nowadays, I create a basic layout in my head or paper and start coding and design while coding it.\n                      <br><br>\n                      The app worked solely on <a href=\"https://socket.io/\" target=\"_blank\">Sockets</a>. What it does was listens to events or emits them. So if any event, like a system is down is emitted and this is listened in the frontend and the useful action is taken. The status was updated every 30 minutes ny pinging the service or the system.\n                      <br><br>\n                      It also had a feature for force updating the status, in which it forcefully updated the status for the selected services or systems. This app was made for the group I am in called <a href=\"http://img.channeli.in/\" target=\"_blank\">Information Management Group</a>, IIT Roorkee.",
      "details": [],
      "tools": {
        "Tools": "HTML/CSS/JS, Bootstrap, jQuery, Sockets, Vim Text Editor",
        "Type": "Intranet College App",
        "Time": "January 2016"
      }
    },
    {
      "title": "Chat Module for Tagbin®",
      "subtitle": "Freelance Project",
      "shortDesc": "A messaging module which included normal messaging and group messaging. This was implemented using StropheJS which uses XMPP protocol. AngularJS was the framework used.",
      "externalLink": "",
      "shortDescAlt": "This app served as an instant messaging module for Tagbin. It had single and multiple user chats. The web app was made already in Angular so this module was to be made in Angular too.\n                      <br><br>\n                      I didn't design anything here because we used a template project in which chat module was provided. I needed to make this working. We used <a href=\"http://strophe.im/strophejs/\" target=\"_blank\">StropheJS</a> as the library for integrating the module with the backend.\n                      <br><br>\n                      <a href=\"http://strophe.im/strophejs/\" target=\"_blank\">StropheJS</a> worked on XMPP Protocol, which is used by various instant messengers such as WhatsApp. XMPP works on messaging and presence objects using XML for exchanging data between users. This was used alongside AngularJS.\n                      <br><br>\n                      It already ahd factories and services written. So I needed to integrate them with the controllers. I needed to understand the code too for this. The app was completed only with the help of the mentor. Without him, I couldn't have managed to pull off this app.",
      "details": [],
      "tools": {
        "Tools": "AngularJS, StropheJS, HTML/CSS/JS",
        "Type": "Freelance",
        "Time": "October 2016"
      }
    },
    {
      "title": "Web App for GreyNexus®",
      "subtitle": "Freelance Project",
      "shortDesc": "This product is a social and business networking solution for teachers and educators. This app used AngularJS and basic frontend technologies.",
      "externalLink": "",
      "shortDescAlt": "The app is not launched yet. So can't discuss the particulars. Although the technicalities can be discussed. I used my own starter project for the app. The app is made using AngularJS as the framework and basic frontend technologies.\n                      <br><br>\n                      The app uses MVC structure. The APIs are consumed in the services and are used in controllers. There was a problem though sending JSON in POST data. File couldn't be sent using normal post in Angular. You have to use HTML Form to send data. But the code was in AngularJS, so we couldn't do this. So I looked up and found the best solution for file upload in AngularJS using <a href=\"https://github.com/danialfarid/ng-file-upload\" target=\"_blank\">ng-file-upload</a>. This basic directive solved the problem easily.\n                      <br><br>\n                      The design was already there. The HTML templates were given. I had to make the website fully functional and dynamic. I used UI-Router for routing.",
      "details": [],
      "tools": {
        "Tools": "AngularJS, HTML/CSS/JS, Bootstrap",
        "Type": "Freelance",
        "Time": "February 2017"
      }
    },
    {
      "title": "Website for SMP",
      "subtitle": "College Group",
      "shortDesc": "Developed and designed a static website for college group called Student Mentorship Program, IIT Roorkee.",
      "externalLink": "http://smp.iitr.ac.in",
      "shortDescAlt": "The website was for a college group called Student Mentorship Program. It is an initiative under the aegis of the Dean of Students' Welfare, that aims to foster healthy senior-junior interaction to make transition into campus-life easier for the incoming freshmen.\n                      <br><br>\n                      I had managed to set up a layout on paper and started coding this using HTML, CSS and JQuery. I designed the website while coding itself. The app was designed with Material Design guidelines. It has 5-6 pages, purely static and responsive. I got to use <a href=\"http://materializecss.com/\" target=\"_blank\">Materiallize.css</a> which is a very good framework for Material Design. I completed the whole website in a day, if it sounds like an achievment.\n                      <br><br>\n                      The website is live at <a href=\"http://smp.iitr.ac.in\" target=\"_blank\">smp.iitr.ac.in</a>.",
      "details": [],
      "tools": {
        "Tools": "HTML/CSS/JS, jQuery, Bootstrap",
        "Type": "College Group",
        "Time": "March 2016"
      }
    },
    {
      "title": "Design for Geek Gazette",
      "subtitle": "College Magazine",
      "shortDesc": "At Geek Gazette, I am a designer working with a team of 13 designers. Together we design the official technical magazine of our college, IIT Roorkee which comes out each semester.",
      "externalLink": "https://issuu.com/geekgazette2/docs/final.compressed",
      "shortDescAlt": "At Geek Gazette, I am a designer working with a team of 13 designers. Together we design the official technical magazine of our college, IIT Roorkee which comes out each semester.\n                      <br><br>\n                      This was the first college group I joined after coming to college. After joining, I got to learn about Designing. I learnt Illustrator from the seniors and through youtube tutorials.\n                      <br><br>\n                      After a semester we started designing the magazine under the guidance from seniors. Our year included 4 members inclusive of me. We designed and published the magazine in the 4th semester. We implemented selective coloring for the magazine at that time.\n                      <br><br>\n                      The online copy of the magazine can be found <a href=\"https://issuu.com/geekgazette2/docs/final.compressed\" target=\"_blank\">here</a>",
      "details": [],
      "tools": {
        "Tools": "Illustrator, Photoshop",
        "Type": "College Group",
        "Time": "July 2015 - April 2016"
      }
    },
    {
      "title": "Angular Gulp Seed",
      "subtitle": "Open Source Project",
      "shortDesc": "Developed a starter project which is used with AngularJS and Gulp, which follows standard MVC architecture. This code is open sourced at Github.",
      "externalLink": "https://github.com/mohitvirli/angular-gulp-seed",
      "shortDescAlt": "This is a basic starter project to initialize your project using AngularJS and Gulp. It follows MVC architecture and uses the perfect app structure to enhance productivity.\n                      <br><br>\n                      This seed contains a sample AngularJS application with useable Gulp tasks which comes in handy for the build process. This app also uses Bower as the client-side package manager.\n                      <br><br>\n                      In this seed app, UI-router is used for routing using states. I have created sample controllers, views services, directives etc. This project targets small scale Angular apps. I have written out the full documentation on <a href='https://github.com/mohitvirli/angular-gulp-seed' target=\"_blank\">Github</a>\n                      <br><br>\n                      During the time spent at my internship in summer 2016, I really needed the most suitable project structure and the utility for the app to be created there. So I set up this structure and worked on enhancing the flow and open souced it later on so that people who are stuck like me, can use it.",
      "details": [],
      "tools": {
        "Tools": "HTML/CSS/JS, AngularJS, GulpJs, Bower, NPM ",
        "Type": "Open Source",
        "Time": "August 2016"
      }
    },
    {
      "title": "Connect-dil",
      "subtitle": "College Intranet App",
      "shortDesc": "An app to share love in the Valentine's week where people can send roses and make couples. Done using React, Redux, Webpack and SCSS. Used React-Semantic for implementation of design.",
      "externalLink": "",
      "shortDescAlt": "This app was an idea created overnight 3 years ago. This app serves as a fun app during the\n                      Valentine's week and is by far the most used app in our college with around 4000+ users and\n                      14,000 sessions. In the app people can search and send roses with some message to someone the like\n                      or just for\n                      fun and nominate any couple and a leader board is maintained.\n                      <br><br>\n                      The app was already written in AngularJS (1.x) and we had to add this new couple feature so  i\n                      thought to port the whole app to React making it future proof. So me and one other guy started\n                      working on the frontend and one girl on the backend which was written in Node Express Redis.",
      "details": [
        {
          "title": "Project Details",
          "description": "We had to deliver the app within 2-3 days with testing done. We worked using React, Redux and\n                      Webpack as the core tech along with SCSS for styles. Used React Semantic to ease the work flow.\n                      We also had to integrate a college chat using Sockets. The backend was in Node so we integrated\n                      a single server where backend and frontend both were served."
        }
      ],
      "tools": {
        "Tools": "React, Redux, Webpack, SCSS",
        "Type": "College Intranet App",
        "Time": "February 2017"
      }
    },
    {
      "title": "State.js",
      "subtitle": "Open Source Project",
      "shortDesc": "State.js is library which is useful in converting JS objects into observables and has handy API to manipulate the state. This was given as an assignment in which I used Vanilla JS (ES6) and Gulp with Webpack as the build system. Used Mocha, Chai and Istanbul for testing, Travis for automated build and Coveralls for test coverage.",
      "shortDescAlt": "State.js is library which is useful in converting JS objects into observables and has handy API to manipulate the state.\n                      <br><br>\n                      This was given to me as an assignment and I thought it would be better to open source it to\n                      showcase it to people. I used tools which I learnt along the way.\n                      <br><br>\n                      Link to Github repo - <a target='_blank' href='https://github.com/mohitvirli/state.js'>https://github.com/mohitvirli/state.js</a>",
      "externalLink": "https://github.com/mohitvirli/state.js",
      "details": [
        {
          "title": "Project Details",
          "description": "I had to deliver the library such that it can be used with both ES6 and ES5 standards. I had to\n                      create a build system and write unit tests with atleast 50% coverage. I also had to maintain\n                      the documentation and lint the code."
        },
        {
          "title": "What I used",
          "description": "I first checked out an example on how to use webpack with gulp which serves the purpose of the\n                      build system. Babel was ofcourse used to transpile the code. Tests were supposed to be written\n                      so I used Mocha with Chai.js. For the test\n                      coverage thing, I used Istanbul. I also wanted an automated build system so used Travis and for\n                      the coverage, integrated it with Coveralls.io."
        }
      ],
      "tools": {
        "Tools": "JavaScript (ES6), Babel, Gulp, Webpack, Mocha, Chai, Istanbul,\n                      Travis, Coveralls",
        "Type": "Open Source",
        "Time": "February 2017"
      }
    }
  ]
}
